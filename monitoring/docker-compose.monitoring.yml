# Docker Compose for monitoring stack
version: '3.8'

services:
  # Prometheus server
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring
      - analytics-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:9.3.0
    container_name: ecommerce-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-piechart-panel
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring
      - analytics-network

  # Redis exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.45.0
    container_name: ecommerce-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_EXPORTER_INCL_SYSTEM_METRICS=true
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - monitoring
      - analytics-network

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: ecommerce-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  # Alertmanager for alert handling
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ecommerce-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    restart: unless-stopped
    networks:
      - monitoring

  # Nginx exporter (optional)
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.10.0
    container_name: ecommerce-nginx-exporter
    ports:
      - "9113:9113"
    command:
      - '-nginx.scrape-uri=http://nginx:8080/nginx_status'
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - monitoring
      - analytics-network

  # Loki for log aggregation (optional)
  loki:
    image: grafana/loki:2.7.0
    container_name: ecommerce-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring

  # Promtail for log collection (optional)
  promtail:
    image: grafana/promtail:2.7.0
    container_name: ecommerce-promtail
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - ../logs:/app/logs:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - monitoring

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:1.42
    container_name: ecommerce-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  loki-data:

networks:
  monitoring:
    driver: bridge
  analytics-network:
    external: true